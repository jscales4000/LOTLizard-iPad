# iPad Pro Fork Setup & Deployment Guide

## ðŸš€ Quick Start

### 1. Fork the Repository

```bash
# Clone your forked repo
git clone https://github.com/[your-username]/LotPlanner-iPad.git
cd LotPlanner-iPad

# Add original repo as upstream
git remote add upstream https://github.com/jscales4000/LotPlanner.git

# Create iPad-specific branch
git checkout -b ipad-pro-development
```

### 2. Project Structure Setup

```bash
# Create iPad-specific directories
mkdir -p src/components/ipad/{TouchCanvas,FloatingToolbar,GestureHandler,Layout}
mkdir -p src/hooks/ipad
mkdir -p src/lib/{gestures,canvas-touch,ipad-utils}
mkdir -p src/styles/ipad
mkdir -p public/icons/ipad

# Copy shared components
cp -r src/components/shared/* src/components/ipad/shared/
```

### 3. Install iPad-Specific Dependencies

```bash
# Core touch and gesture libraries
npm install --save \
  @use-gesture/react \
  react-spring \
  @react-spring/konva \
  framer-motion \
  @types/hammerjs \
  hammerjs

# Canvas and drawing
npm install --save \
  konva \
  react-konva \
  @types/konva

# iOS-specific capabilities (for Capacitor deployment)
npm install --save \
  @capacitor/core \
  @capacitor/ios \
  @capacitor/haptics \
  @capacitor/filesystem \
  @capacitor/share \
  @capacitor/status-bar \
  @capacitor/splash-screen

# Development dependencies
npm install --save-dev \
  @capacitor/cli \
  ios-sim \
  ios-deploy
```

### 4. Configuration Files

#### package.json modifications

```json
{
  "name": "lotplanner-ipad-pro",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "build:ipad": "next build && cap sync ios",
    "ios": "cap run ios",
    "ios:device": "cap run ios --target=device",
    "cap:sync": "cap sync",
    "cap:open": "cap open ios"
  }
}
```

#### capacitor.config.ts

```typescript
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.lotplanner.ipad',
  appName: 'LotPlanner Pro',
  webDir: 'out',
  server: {
    androidScheme: 'https'
  },
  ios: {
    contentInset: 'automatic',
    scrollEnabled: false,
    backgroundColor: '#f8f9fa'
  },
  plugins: {
    Haptics: {
      enabled: true
    },
    StatusBar: {
      style: 'dark',
      backgroundColor: '#667eea'
    },
    SplashScreen: {
      launchShowDuration: 2000,
      backgroundColor: '#667eea',
      showSpinner: false
    }
  }
};

export default config;
```

#### next.config.js modifications

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  trailingSlash: true,
  images: {
    unoptimized: true
  },
  // iPad-specific optimizations
  experimental: {
    optimizePackageImports: ['framer-motion', '@use-gesture/react'],
  },
  // PWA configuration for iPad
  headers: async () => [
    {
      source: '/(.*)',
      headers: [
        {
          key: 'X-Content-Type-Options',
          value: 'nosniff',
        },
        {
          key: 'X-Frame-Options',
          value: 'DENY',
        },
      ],
    },
  ],
}

module.exports = nextConfig
```

## ðŸ“± iPad-Specific Implementation

### 1. Main App Component

Create `src/app/ipad/page.tsx`:

```typescript
'use client';

import { IPadLotPlannerApp } from '@/components/ipad';
import '@/styles/ipad/professional.css';

export default function IPadApp() {
  return <IPadLotPlannerApp />;
}
```

### 2. Touch Gesture Hook

Create `src/hooks/ipad/useTouch.ts`:

```typescript
import { useCallback, useEffect, useRef } from 'react';

interface TouchGestureOptions {
  onPan?: (delta: { x: number; y: number }) => void;
  onPinch?: (scale: number, center: { x: number; y: number }) => void;
  onRotate?: (angle: number, center: { x: number; y: number }) => void;
  onLongPress?: (point: { x: number; y: number }) => void;
  onTap?: (point: { x: number; y: number }) => void;
}

export const useTouch = (
  elementRef: React.RefObject<HTMLElement>,
  options: TouchGestureOptions = {}
) => {
  const gestureStateRef = useRef({
    touches: [] as Touch[],
    initialDistance: 0,
    initialAngle: 0,
    startTime: 0
  });

  const handleTouchStart = useCallback((e: TouchEvent) => {
    e.preventDefault();
    const touches = Array.from(e.touches);
    gestureStateRef.current.touches = touches;
    gestureStateRef.current.startTime = Date.now();

    if (touches.length === 2) {
      const [touch1, touch2] = touches;
      gestureStateRef.current.initialDistance = getDistance(touch1, touch2);
      gestureStateRef.current.initialAngle = getAngle(touch1, touch2);
    }
  }, []);

  const handleTouchMove = useCallback((e: TouchEvent) => {
    e.preventDefault();
    const touches = Array.from(e.touches);
    const prevTouches = gestureStateRef.current.touches;

    if (touches.length === 1 && prevTouches.length === 1) {
      // Single finger pan
      const delta = {
        x: touches[0].clientX - prevTouches[0].clientX,
        y: touches[0].clientY - prevTouches[0].clientY
      };
      options.onPan?.(delta);
    } else if (touches.length === 2 && prevTouches.length === 2) {
      // Two finger pinch/zoom
      const currentDistance = getDistance(touches[0], touches[1]);
      const currentAngle = getAngle(touches[0], touches[1]);
      const center = getCenter(touches[0], touches[1]);
      
      const scale = currentDistance / gestureStateRef.current.initialDistance;
      const angleChange = currentAngle - gestureStateRef.current.initialAngle;
      
      options.onPinch?.(scale, center);
      options.onRotate?.(angleChange, center);
    }

    gestureStateRef.current.touches = touches;
  }, [options]);

  const handleTouchEnd = useCallback((e: TouchEvent) => {
    const duration = Date.now() - gestureStateRef.current.startTime;
    
    // Detect tap
    if (duration < 200 && gestureStateRef.current.touches.length === 1) {
      const touch = gestureStateRef.current.touches[0];
      options.onTap?.({ x: touch.clientX, y: touch.clientY });
    }
    
    gestureStateRef.current.touches = [];
  }, [options]);

  useEffect(() => {
    const element = elementRef.current;
    if (!element) return;

    element.addEventListener('touchstart', handleTouchStart, { passive: false });
    element.addEventListener('touchmove', handleTouchMove, { passive: false });
    element.addEventListener('touchend', handleTouchEnd, { passive: false });

    return () => {
      element.removeEventListener('touchstart', handleTouchStart);
      element.removeEventListener('touchmove', handleTouchMove);
      element.removeEventListener('touchend', handleTouchEnd);
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);
};

// Helper functions
const getDistance = (touch1: Touch, touch2: Touch): number => {
  return Math.sqrt(
    Math.pow(touch2.clientX - touch1.clientX, 2) + 
    Math.pow(touch2.clientY - touch1.clientY, 2)
  );
};

const getAngle = (touch1: Touch, touch2: Touch): number => {
  return Math.atan2(
    touch2.clientY - touch1.clientY,
    touch2.clientX - touch1.clientX
  );
};

const getCenter = (touch1: Touch, touch2: Touch): { x: number; y: number } => {
  return {
    x: (touch1.clientX + touch2.clientX) / 2,
    y: (touch1.clientY + touch2.clientY) / 2
  };
};
```

### 3. Canvas Touch Integration

Create `src/lib/canvas-touch/TouchCanvas.ts`:

```typescript
import Konva from 'konva';

export class TouchOptimizedCanvas {
  private stage: Konva.Stage;
  private layer: Konva.Layer;
  private transformer: Konva.Transformer;

  constructor(container: HTMLDivElement, width: number, height: number) {
    this.stage = new Konva.Stage({
      container,
      width,
      height,
      draggable: true
    });

    this.layer = new Konva.Layer();
    this.stage.add(this.layer);

    this.transformer = new Konva.Transformer({
      resizeEnabled: true,
      rotateEnabled: true,
      borderStroke: '#667eea',
      borderStrokeWidth: 2,
      anchorSize: 20, // Larger for touch
      anchorStroke: '#667eea',
      anchorFill: 'white'
    });
    this.layer.add(this.transformer);

    this.setupTouchEvents();
  }

  private setupTouchEvents() {
    // Touch-optimized selection
    this.stage.on('click tap', (e) => {
      if (e.target === this.stage) {
        this.transformer.nodes([]);
        return;
      }

      // Multi-select with Konva.Transformer
      const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;
      const isSelected = this.transformer.nodes().indexOf(e.target) >= 0;

      if (!metaPressed && !isSelected) {
        this.transformer.nodes([e.target]);
      } else if (metaPressed && isSelected) {
        const nodes = this.transformer.nodes().slice();
        nodes.splice(nodes.indexOf(e.target), 1);
        this.transformer.nodes(nodes);
      } else if (metaPressed && !isSelected) {
        const nodes = this.transformer.nodes().concat([e.target]);
        this.transformer.nodes(nodes);
      }
    });

    // Enhanced touch feedback
    this.stage.on('dragstart', () => {
      if (navigator.vibrate) {
        navigator.vibrate(50);
      }
    });

    this.stage.on('dragend', () => {
      if (navigator.vibrate) {
        navigator.vibrate(25);
      }
    });
  }

  addObject(config: any) {
    let shape;
    
    switch (config.type) {
      case 'rectangle':
        shape = new Konva.Rect({
          ...config,
          draggable: true,
          stroke: '#ddd',
          strokeWidth: 1
        });
        break;
      case 'circle':
        shape = new Konva.Circle({
          ...config,
          draggable: true,
          stroke: '#ddd',
          strokeWidth: 1
        });
        break;
      default:
        return;
    }

    // Touch-optimized hover effects
    shape.on('mouseenter touchstart', () => {
      shape.stroke('#667eea');
      shape.strokeWidth(2);
      this.layer.batchDraw();
    });

    shape.on('mouseleave touchend', () => {
      if (!this.transformer.nodes().includes(shape)) {
        shape.stroke('#ddd');
        shape.strokeWidth(1);
        this.layer.batchDraw();
      }
    });

    this.layer.add(shape);
    this.layer.batchDraw();
    
    return shape;
  }

  getStage() {
    return this.stage;
  }

  getLayer() {
    return this.layer;
  }

  destroy() {
    this.stage.destroy();
  }
}
```

## ðŸ”§ Backend Integration

### 1. Shared Supabase Configuration

Create `src/lib/supabase/config.ts`:

```typescript
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false // Disable for iPad app
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'X-Client-Platform': 'iPad-Pro'
    }
  }
});

// iPad-specific optimizations
export const initializeSupabase = async () => {
  // Set up offline capabilities
  const { data: { session } } = await supabase.auth.getSession();
  
  if (session) {
    // Pre-load user projects for offline access
    const { data: projects } = await supabase
      .from('projects')
      .select('*')
      .eq('user_id', session.user.id);
    
    // Cache in IndexedDB for offline access
    if (projects) {
      await cacheProjectsLocally(projects);
    }
  }
};

// Local caching for offline functionality
const cacheProjectsLocally = async (projects: any[]) => {
  if ('indexedDB' in window) {
    const db = await openDB('lotplanner-cache', 1);
    const tx = db.transaction('projects', 'readwrite');
    
    for (const project of projects) {
      await tx.store.put(project);
    }
    
    await tx.done;
  }
};

const openDB = (name: string, version: number): Promise<IDBDatabase> => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(name, version);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    
    request.onupgradeneeded = () => {
      const db = request.result;
      if (!db.objectStoreNames.contains('projects')) {
        db.createObjectStore('projects', { keyPath: 'id' });
      }
    };
  });
};
```

### 2. iPad-Specific API Layer

Create `src/lib/api/ipad-api.ts`:

```typescript
import { supabase } from '../supabase/config';

export class IPadAPI {
  // Project management with offline support
  static async saveProject(project: any, isOffline = false) {
    if (isOffline) {
      return this.saveProjectOffline(project);
    }

    try {
      const { data, error } = await supabase
        .from('projects')
        .upsert(project)
        .select();

      if (error) throw error;

      // Also save locally for offline access
      await this.saveProjectOffline(project);
      
      return { data, error: null };
    } catch (error) {
      // Fallback to offline save
      return this.saveProjectOffline(project);
    }
  }

  static async saveProjectOffline(project: any) {
    if ('indexedDB' in window) {
      const db = await this.openDB();
      const tx = db.transaction('projects', 'readwrite');
      await tx.store.put({ ...project, _offline: true, _lastModified: Date.now() });
      await tx.done;
      
      return { data: project, error: null };
    }
    
    // Fallback to localStorage
    const projects = JSON.parse(localStorage.getItem('offline-projects') || '[]');
    const existingIndex = projects.findIndex((p: any) => p.id === project.id);
    
    if (existingIndex >= 0) {
      projects[existingIndex] = { ...project, _offline: true };
    } else {
      projects.push({ ...project, _offline: true });
    }
    
    localStorage.setItem('offline-projects', JSON.stringify(projects));
    return { data: project, error: null };
  }

  // Sync offline changes when back online
  static async syncOfflineChanges() {
    try {
      const db = await this.openDB();
      const tx = db.transaction('projects', 'readonly');
      const offlineProjects = await tx.store.getAll();
      
      const projectsToSync = offlineProjects.filter(p => p._offline);
      
      for (const project of projectsToSync) {
        const { _offline, _lastModified, ...cleanProject } = project;
        
        const { error } = await supabase
          .from('projects')
          .upsert(cleanProject);
          
        if (!error) {
          // Remove offline flag
          const updateTx = db.transaction('projects', 'readwrite');
          await updateTx.store.put({ ...cleanProject });
          await updateTx.done;
        }
      }
      
      return { synced: projectsToSync.length, errors: [] };
    } catch (error) {
      console.error('Sync failed:', error);
      return { synced: 0, errors: [error] };
    }
  }

  private static openDB(): Promise<IDBDatabase> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open('lotplanner-cache', 1);
      
      request.onerror = () => reject(request.error);
      request.onsuccess = () => resolve(request.result);
      
      request.onupgradeneeded = () => {
        const db = request.result;
        if (!db.objectStoreNames.contains('projects')) {
          db.createObjectStore('projects', { keyPath: 'id' });
        }
      };
    });
  }
}
```

## ðŸ“± iOS Deployment Setup

### 1. Initialize Capacitor

```bash
# Initialize Capacitor
npx cap init "LotPlanner Pro" "com.lotplanner.ipad" --web-dir=out

# Add iOS platform
npx cap add ios

# Build and sync
npm run build
npx cap sync ios
```

### 2. iOS Configuration

Create `ios/App/App/Info.plist` additions:

```xml
<!-- Add to existing Info.plist -->
<dict>
  <!-- Existing keys... -->
  
  <!-- iPad-specific settings -->
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeLeft</string>
    <string>UIInterfaceOrientationLandscapeRight</string>
  </array>
  
  <!-- Prevent phone mode on iPad -->
  <key>UIDeviceFamily</key>
  <array>
    <integer>2</integer> <!-- iPad only -->
  </array>
  
  <!-- File sharing capabilities -->
  <key>UIFileSharingEnabled</key>
  <true/>
  <key>LSSupportsOpeningDocumentsInPlace</key>
  <true/>
  
  <!-- Camera and photo library for image uploads -->
  <key>NSCameraUsageDescription</key>
  <string>Take photos to use as backgrounds in your lot plans</string>
  <key>NSPhotoLibraryUsageDescription</key>
  <string>Select images to use as backgrounds in your lot plans</string>
</dict>
```

### 3. Development Workflow

```bash
# Development cycle
npm run dev                    # Web development
npm run build:ipad            # Build for iOS
npx cap open ios              # Open in Xcode

# Testing on device
npm run build
npx cap sync ios
npx cap run ios --target=device

# Debugging
npx cap run ios --livereload --external
```

## ðŸŽ¨ Design System Integration

### 1. iPad-Specific Design Tokens

Create `src/styles/ipad/tokens.css`:

```css
:root {
  /* iPad Pro 12.9" dimensions */
  --ipad-width: 1366px;
  --ipad-height: 1024px;
  --ipad-safe-area-top: 24px;
  --ipad-safe-area-bottom: 34px;
  
  /* Professional color palette */
  --color-primary: #667eea;
  --color-primary-dark: #5a6fd8;
  --color-secondary: #764ba2;
  --color-accent: #ff6b6b;
  
  /* Touch-optimized sizing */
  --touch-target-min: 44px;
  --touch-target-preferred: 56px;
  --touch-target-large: 72px;
  
  /* Professional typography */
  --font-display: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
  --font-text: 'SF Pro Text', -apple-system, BlinkMacSystemFont, sans-serif;
  --font-mono: 'SF Mono', 'Monaco', 'Consolas', monospace;
  
  /* Sophisticated shadows */
  --shadow-subtle: 0 2px 8px rgba(0, 0, 0, 0.04);
  --shadow-medium: 0 4px 16px rgba(0, 0, 0, 0.08);
  --shadow-strong: 0 8px 32px rgba(0, 0, 0, 0.12);
  --shadow-dramatic: 0 16px 64px rgba(0, 0, 0, 0.16);
}
```

### 2. Component Theming

Create `src/styles/ipad/components.css`:

```css
/* Professional component styling */
.professional-panel {
  background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
  border: 1px solid rgba(0, 0, 0, 0.06);
  box-shadow: var(--shadow-medium);
  backdrop-filter: blur(20px);
}

.professional-button {
  background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
  border: none;
  color: white;
  font-weight: 600;
  letter-spacing: -0.01em;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

.professional-button:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-strong);
}

.professional-input {
  background: rgba(255, 255, 255, 0.8);
  border: 2px solid rgba(0, 0, 0, 0.06);
  backdrop-filter: blur(10px);
  transition: all 0.2s ease;
}

.professional-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
  background: rgba(255, 255, 255, 0.95);
}
```

## ðŸ”„ Sync Strategy

### 1. Real-time Sync Setup

Create `src/lib/sync/realtime-sync.ts`:

```typescript
import { supabase } from '../supabase/config';
import { RealtimeChannel } from '@supabase/supabase-js';

export class RealtimeSync {
  private channel: RealtimeChannel | null = null;
  private projectId: string | null = null;

  async subscribeToProject(projectId: string, callbacks: {
    onUpdate?: (payload: any) => void;
    onInsert?: (payload: any) => void;
    onDelete?: (payload: any) => void;
  }) {
    this.projectId = projectId;
    
    // Unsubscribe from previous channel
    if (this.channel) {
      await supabase.removeChannel(this.channel);
    }

    // Subscribe to project changes
    this.channel = supabase
      .channel(`project-${projectId}`)
      .on('postgres_changes', {
        event: 'UPDATE',
        schema: 'public',
        table: 'projects',
        filter: `id=eq.${projectId}`
      }, callbacks.onUpdate || (() => {}))
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'project_objects',
        filter: `project_id=eq.${projectId}`
      }, callbacks.onInsert || (() => {}))
      .on('postgres_changes', {
        event: 'DELETE',
        schema: 'public',
        table: 'project_objects',
        filter: `project_id=eq.${projectId}`
      }, callbacks.onDelete || (() => {}))
      .subscribe();
  }

  async unsubscribe() {
    if (this.channel) {
      await supabase.removeChannel(this.channel);
      this.channel = null;
    }
  }

  // Presence for collaborative editing
  async enablePresence(userId: string, userInfo: any) {
    if (!this.channel || !this.projectId) return;

    const presenceRef = this.channel.subscribe(async (status) => {
      if (status === 'SUBSCRIBED') {
        await this.channel!.track({
          user_id: userId,
          user_info: userInfo,
          online_at: new Date().toISOString(),
          project_id: this.projectId
        });
      }
    });

    return presenceRef;
  }
}
```

## ðŸš€ Performance Optimizations

### 1. Canvas Performance

Create `src/lib/performance/canvas-optimizer.ts`:

```typescript
export class CanvasOptimizer {
  private canvas: HTMLCanvasElement;
  private context: CanvasRenderingContext2D;
  private devicePixelRatio: number;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;
    this.context = canvas.getContext('2d')!;
    this.devicePixelRatio = window.devicePixelRatio || 1;
    
    this.setupHighDPI();
  }

  private setupHighDPI() {
    const rect = this.canvas.getBoundingClientRect();
    
    // Set actual size in memory (scaled for device pixel ratio)
    this.canvas.width = rect.width * this.devicePixelRatio;
    this.canvas.height = rect.height * this.devicePixelRatio;
    
    // Scale the canvas CSS size to match
    this.canvas.style.width = rect.width + 'px';
    this.canvas.style.height = rect.height + 'px';
    
    // Scale the drawing context so everything renders at high DPI
    this.context.scale(this.devicePixelRatio, this.devicePixelRatio);
  }

  // Optimized rendering for large numbers of objects
  renderObjects(objects: any[], viewport: any) {
    // Clear canvas
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Calculate visible bounds
    const visibleBounds = this.calculateVisibleBounds(viewport);
    
    // Only render objects within viewport
    const visibleObjects = objects.filter(obj => 
      this.isObjectVisible(obj, visibleBounds)
    );
    
    // Batch render by type for performance
    const objectsByType = this.groupObjectsByType(visibleObjects);
    
    for (const [type, typeObjects] of Object.entries(objectsByType)) {
      this.renderObjectType(type, typeObjects as any[]);
    }
  }

  private calculateVisibleBounds(viewport: any) {
    const { scale, x, y } = viewport;
    return {
      left: -x / scale,
      top: -y / scale,
      right: (-x + this.canvas.width) / scale,
      bottom: (-y + this.canvas.height) / scale
    };
  }

  private isObjectVisible(obj: any, bounds: any): boolean {
    return !(obj.x + obj.width < bounds.left || 
             obj.x > bounds.right ||
             obj.y + obj.height < bounds.top ||
             obj.y > bounds.bottom);
  }

  private groupObjectsByType(objects: any[]) {
    return objects.reduce((groups, obj) => {
      if (!groups[obj.type]) groups[obj.type] = [];
      groups[obj.type].push(obj);
      return groups;
    }, {} as Record<string, any[]>);
  }

  private renderObjectType(type: string, objects: any[]) {
    // Set common styles for this type
    this.context.save();
    
    switch (type) {
      case 'rectangle':
        this.context.fillStyle = '#4ecdc4';
        this.context.strokeStyle = '#333';
        this.context.lineWidth = 1;
        break;
      case 'circle':
        this.context.fillStyle = '#ff6b6b';
        this.context.strokeStyle = '#333';
        this.context.lineWidth = 1;
        break;
    }
    
    // Render all objects of this type
    objects.forEach(obj => this.renderSingleObject(obj, type));
    
    this.context.restore();
  }

  private renderSingleObject(obj: any, type: string) {
    this.context.save();
    
    // Apply transforms
    this.context.translate(obj.x + obj.width/2, obj.y + obj.height/2);
    this.context.rotate((obj.rotation || 0) * Math.PI / 180);
    this.context.translate(-obj.width/2, -obj.height/2);
    
    // Render based on type
    switch (type) {
      case 'rectangle':
        this.context.fillRect(0, 0, obj.width, obj.height);
        this.context.strokeRect(0, 0, obj.width, obj.height);
        break;
      case 'circle':
        this.context.beginPath();
        this.context.arc(obj.width/2, obj.height/2, obj.width/2, 0, 2 * Math.PI);
        this.context.fill();
        this.context.stroke();
        break;
    }
    
    this.context.restore();
  }
}
```

## ðŸ“± Final Steps

### 1. Build and Test

```bash
# Final build
npm run build:ipad

# Test on iPad Pro simulator
npx cap run ios --target="iPad Pro (12.9-inch) (6th generation)"

# Test on actual device
npx cap run ios --target=device
```

### 2. App Store Preparation

```bash
# Create production build
npm run build
npx cap sync ios

# Open Xcode for final configuration
npx cap open ios
```

### 3. Key Xcode Settings

In Xcode, configure:

- **Deployment Target**: iOS 15.0+
- **Device Family**: iPad only
- **Supported Orientations**: Landscape Left & Right
- **Bundle Identifier**: com.lotplanner.ipad
- **App Icon**: High-resolution iPad icons
- **Launch Screen**: Professional splash screen

This setup creates a professional, touch-optimized iPad Pro version of LotPlanner that maintains full backend compatibility while providing a native iPad experience with advanced touch gestures, offline capabilities, and App Store-ready deployment.